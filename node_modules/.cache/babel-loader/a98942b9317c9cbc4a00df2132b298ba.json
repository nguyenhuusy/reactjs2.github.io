{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Desktop/FrontEnd/reactjs2.github.io/src/pages/ColorfulTiles/GenerateForm/GenerateHistory.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { generate_tiles2 } from '../../../redux/actions/getColorActions';\nimport { saveColor, nameColor } from '../../../redux/actions/saveColorActions';\nimport { getDataFromLocalStorage, saveDataToLocalStorage } from '../../../utils/common';\n\nclass GenerateHistory extends Component {\n  constructor() {\n    super();\n\n    this.deleteTile = () => {\n      const _this$props = this.props,\n            savecolors = _this$props.savecolors,\n            namecolors = _this$props.namecolors,\n            saveColor = _this$props.saveColor,\n            nameColor = _this$props.nameColor;\n      const _this$props2 = this.props,\n            item = _this$props2.item,\n            name = _this$props2.name;\n      const colortileUpdate = savecolors.filter(data => JSON.stringify(data) !== JSON.stringify(item));\n      const nameUpdate = namecolors.filter(data => JSON.stringify(data) !== JSON.stringify(name)); // const a=[1,2,3,4,5];\n      // const b=a.filter((data)=>data!==2);\n      // console.log('b',b);\n\n      saveColor(colortileUpdate);\n      nameColor(nameUpdate);\n    };\n\n    this.changeDisplay = () => {\n      const display = this.state.display;\n\n      if (display === 0) {\n        this.setState({\n          display: 1\n        });\n      } else {\n        this.setState({\n          display: 0\n        });\n      }\n    };\n\n    this.state = {\n      row: 0,\n      column: 0,\n      data: '',\n      display: 0,\n      nameinput: '' //savecolors: getDataFromLocalStorage('colortile'),\n      //namecolors: getDataFromLocalStorage('colorname')\n\n    };\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          item = _this$props3.item,\n          name = _this$props3.name,\n          idx = _this$props3.idx;\n    const _this$state = this.state,\n          display = _this$state.display,\n          namecolors = _this$state.namecolors;\n    return React.createElement(\"div\", {\n      className: \"generate_history\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      key: idx,\n      onClick: this.changeDisplay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, name), !!display && React.createElement(\"div\", {\n      className: \"history_item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.deleteTile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Delete\"), item.map((row, rowidx) => React.createElement(\"div\", {\n      key: rowidx,\n      className: \"tile-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, row.map((column, columnidx) => React.createElement(\"div\", {\n      className: \"tile\",\n      key: columnidx,\n      style: {\n        backgroundColor: column\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  getcolors: state.getcolor.data,\n  savecolors: state.saveColor.data,\n  namecolors: state.saveColor.name\n});\n\nexport default connect(mapStateToProps, {\n  saveColor,\n  nameColor,\n  generate_tiles2\n})(GenerateHistory);","map":{"version":3,"sources":["/Users/apple/Desktop/FrontEnd/reactjs2.github.io/src/pages/ColorfulTiles/GenerateForm/GenerateHistory.jsx"],"names":["React","Component","connect","generate_tiles2","saveColor","nameColor","getDataFromLocalStorage","saveDataToLocalStorage","GenerateHistory","constructor","deleteTile","props","savecolors","namecolors","item","name","colortileUpdate","filter","data","JSON","stringify","nameUpdate","changeDisplay","display","state","setState","row","column","nameinput","render","idx","map","rowidx","columnidx","backgroundColor","mapStateToProps","getcolors","getcolor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { generate_tiles2 } from '../../../redux/actions/getColorActions';\nimport { saveColor ,nameColor} from '../../../redux/actions/saveColorActions';\nimport { getDataFromLocalStorage, saveDataToLocalStorage } from '../../../utils/common';\nclass GenerateHistory extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            row: 0,\n            column: 0,\n            data: '',\n            display: 0,\n            nameinput: '',\n            //savecolors: getDataFromLocalStorage('colortile'),\n            //namecolors: getDataFromLocalStorage('colorname')\n        }\n    }\n    \n    deleteTile=()=>{\n        const {savecolors,namecolors,saveColor,nameColor}=this.props;\n        const {item,name}=this.props;\n        const colortileUpdate=savecolors.filter((data)=>JSON.stringify(data)!==JSON.stringify(item));\n        const nameUpdate=namecolors.filter((data)=>JSON.stringify(data)!==JSON.stringify(name));\n        // const a=[1,2,3,4,5];\n        // const b=a.filter((data)=>data!==2);\n        // console.log('b',b);\n        saveColor(colortileUpdate);\n        nameColor(nameUpdate);\n       \n    }\n    changeDisplay=()=>{\n        const {display}=this.state;\n        if (display===0) {\n            this.setState({display:1})\n        } else {\n            this.setState({display:0})\n        }\n    }\n    render() {\n        const {item,name,idx}=this.props;\n        const {display,namecolors}=this.state;\n        \n        return (\n            <div className=\"generate_history\">\n             <button key={idx} onClick={this.changeDisplay}>{name}</button>   \n             {!!display && <div className=\"history_item\">\n                 <button onClick={this.deleteTile}>Delete</button>\n            {item.map((row, rowidx) =>\n              <div key={rowidx} className=\"tile-row\">\n                {row.map((column, columnidx) =>\n                  <div\n                    className=\"tile\"\n                    key={columnidx}\n                    style={{ backgroundColor: column }}\n\n                  />\n                )}\n              </div>\n            )}\n          </div>\n          }\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => ({\n    getcolors: state.getcolor.data,\n    savecolors: state.saveColor.data,\n    namecolors:state.saveColor.name\n})\nexport default connect(mapStateToProps, { saveColor,nameColor, generate_tiles2 })(GenerateHistory);"]},"metadata":{},"sourceType":"module"}