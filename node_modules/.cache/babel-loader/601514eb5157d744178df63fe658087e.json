{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Desktop/FrontEnd/react-nordic5/src/pages/ColorfulTiles/GenerateForm/GenerateForm.jsx\";\nimport React, { Component } from 'react';\nimport { generateTiles } from '../../../redux/actions/tileActions';\nimport TextInput from '../../../components/Forms/TextInput';\nimport './GenerateForm.scss';\nimport { Link } from 'react-router-dom';\nimport { generate_tiles, generate_tiles2 } from '../../../redux/actions/getColorActions';\nimport { connect } from 'react-redux';\nimport { saveColor, saveName } from '../../../redux/actions/saveColorActions';\nimport Tile from '../../../components/Tile';\nimport GenerateHistory from './GenerateHistory';\nimport { getDataFromLocalStorage, saveDataToLocalStorage } from '../../../utils/common';\n\nclass GenerateForm extends Component {\n  constructor() {\n    super();\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onGenerate = () => {\n      const _this$state = this.state,\n            row = _this$state.row,\n            column = _this$state.column;\n      this.props.generate_tiles(row, column);\n    };\n\n    this.setAllToDefault = () => {\n      this.props.generate_tiles({\n        row: 0,\n        column: 0\n      });\n      setTimeout(() => this.props.generate_tiles(this.state));\n    };\n\n    this.savethiscolor = () => {\n      const _this$props = this.props,\n            getcolors = _this$props.getcolors,\n            saveColor = _this$props.saveColor,\n            namecolors = _this$props.namecolors,\n            savecolors = _this$props.savecolors,\n            saveName = _this$props.saveName;\n      const _this$state2 = this.state,\n            nameinput = _this$state2.nameinput,\n            display = _this$state2.display;\n      const data = getDataFromLocalStorage('colorhistory');\n      const updatedata = [...data, namecolors, savecolors];\n      namecolors.push(nameinput);\n      saveName(namecolors);\n      savecolors.push(getcolors); //console.log('data',data)\n\n      saveColor(savecolors);\n      saveDataToLocalStorage('colorhistory', updatedata);\n      this.setState({\n        display: 0\n      }); //console.log(savecolors);\n      //const {row, column}=this.state;\n      //this.props.generate_tiles2(savecolors);\n\n      /*savecolors.map((item,idx)=>{\n        this.props.generate_tiles2(item);\n      })*/\n\n      this.setAllToDefault();\n      return;\n    };\n\n    this.deletetile = () => {\n      const data = this.state.data;\n      const savecolors = this.props.savecolors;\n      savecolors.map((item, idx) => {\n        if (item === data) {\n          this.setState({\n            data: ''\n          });\n        }\n      });\n    };\n\n    this.tiles = item => {\n      const data = this.state.data;\n      this.setState({\n        data: item\n      });\n    };\n\n    this.handleChange = e => {\n      const nameinput = this.state.nameinput;\n      console.log('e.target.value', e.target.value);\n      this.setState({\n        nameinput: e.target.value\n      });\n      console.log('nametile', nameinput);\n    };\n\n    this.displayinput = () => {\n      const display = this.state.display;\n\n      if (!display) {\n        this.setState({\n          display: 1\n        });\n      }\n    };\n\n    this.state = {\n      row: 0,\n      column: 0,\n      data: '',\n      nameinput: '',\n      display: 0\n    };\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          data = _this$state3.data,\n          row = _this$state3.row,\n          column = _this$state3.column,\n          nameinput = _this$state3.nameinput,\n          display = _this$state3.display;\n    const _this$props2 = this.props,\n          savecolors = _this$props2.savecolors,\n          saveName = _this$props2.saveName,\n          namecolors = _this$props2.namecolors;\n    return React.createElement(\"div\", {\n      className: \"generate-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(TextInput, {\n      name: \"row\",\n      label: \"Row\",\n      value: row,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(TextInput, {\n      name: \"column\",\n      label: \"Column\",\n      value: column,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"generate-form__buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"button\",\n      onClick: this.onGenerate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Generate Tiles\"), React.createElement(\"button\", {\n      className: \"button button--grey\",\n      onClick: this.setAllToDefault,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Set all to default\"), React.createElement(\"button\", {\n      className: \"button button--saveimage\",\n      onClick: this.displayinput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Save image\"), !!display && React.createElement(\"div\", {\n      className: \"input-alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"input-alert-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"T\\xEAn image\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"input-alert-name\" //value={nameinput}\n      ,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.savethiscolor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Save the name\")))), React.createElement(\"div\", {\n      className: \"history\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"History\", !!savecolors && React.createElement(\"div\", {\n      className: \"history_item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, savecolors.map((item, idx) => React.createElement(GenerateHistory, {\n      item: item,\n      key: idx,\n      idx: idx,\n      name: namecolors[idx],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }) // <button key={idx} onClick={()=>this.setState({data:item})} >{`Item ${idx}`}</button>               \n    ))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  getcolors: state.getcolor.data,\n  namecolors: state.saveColor.name,\n  savecolors: state.saveColor.data\n});\n\nexport default connect(mapStateToProps, {\n  generate_tiles,\n  saveColor,\n  saveName,\n  generate_tiles2\n})(GenerateForm); //chuyển tất cả các hàm trên về action","map":{"version":3,"sources":["/Users/apple/Desktop/FrontEnd/react-nordic5/src/pages/ColorfulTiles/GenerateForm/GenerateForm.jsx"],"names":["React","Component","generateTiles","TextInput","Link","generate_tiles","generate_tiles2","connect","saveColor","saveName","Tile","GenerateHistory","getDataFromLocalStorage","saveDataToLocalStorage","GenerateForm","constructor","onChange","e","setState","target","name","value","onGenerate","state","row","column","props","setAllToDefault","setTimeout","savethiscolor","getcolors","namecolors","savecolors","nameinput","display","data","updatedata","push","deletetile","map","item","idx","tiles","handleChange","console","log","displayinput","render","mapStateToProps","getcolor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport { generateTiles } from '../../../redux/actions/tileActions';\nimport TextInput from '../../../components/Forms/TextInput';\nimport './GenerateForm.scss';\nimport { Link } from 'react-router-dom';\nimport { generate_tiles, generate_tiles2 } from '../../../redux/actions/getColorActions';\nimport { connect } from 'react-redux';\nimport { saveColor, saveName } from '../../../redux/actions/saveColorActions';\nimport Tile from '../../../components/Tile';\nimport GenerateHistory from './GenerateHistory';\nimport {getDataFromLocalStorage,saveDataToLocalStorage} from '../../../utils/common';\nclass GenerateForm extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      row: 0,\n      column: 0,\n      data: '',\n      nameinput: '',\n      display: 0\n    }\n  }\n\n  onChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  onGenerate = () => {\n\n    const { row, column } = this.state;\n    this.props.generate_tiles(row, column);\n\n\n  }\n\n  setAllToDefault = () => {\n    this.props.generate_tiles({ row: 0, column: 0 });\n    setTimeout(() => this.props.generate_tiles(this.state));\n  }\n  savethiscolor = () => {\n    const { getcolors, saveColor, namecolors, savecolors, saveName } = this.props;\n    const { nameinput, display, } = this.state;\n    const data=getDataFromLocalStorage('colorhistory');\n    const updatedata=[...data, namecolors, savecolors];\n\n    namecolors.push(nameinput);\n    saveName(namecolors);\n    \n    savecolors.push(getcolors);\n    //console.log('data',data)\n    saveColor(savecolors);\n    \n    saveDataToLocalStorage('colorhistory',updatedata)\n    this.setState({ display: 0 });\n    //console.log(savecolors);\n    //const {row, column}=this.state;\n    //this.props.generate_tiles2(savecolors);\n    /*savecolors.map((item,idx)=>{\n      this.props.generate_tiles2(item);\n    })*/\n    this.setAllToDefault();\n    return;\n  }\n  deletetile = () => {\n    const { data } = this.state;\n    const { savecolors } = this.props;\n    savecolors.map((item, idx) => {\n      if (item === data) {\n        this.setState({ data: '' });\n      }\n    })\n  }\n  tiles = (item) => {\n    const { data } = this.state;\n    this.setState({ data: item });\n  }\n  handleChange = e => {\n    const { nameinput } = this.state;\n    console.log('e.target.value', e.target.value);\n    this.setState({ nameinput: e.target.value });\n    console.log('nametile', nameinput);\n  }\n  displayinput = () => {\n    const { display } = this.state;\n    if (!display) {\n      this.setState({ display: 1 })\n    }\n\n  }\n  render() {\n    const { data, row, column, nameinput, display } = this.state;\n    const { savecolors, saveName, namecolors } = this.props;\n\n    return (\n      <div className=\"generate-form\">\n        <div>\n          <TextInput name=\"row\" label=\"Row\" value={row} onChange={this.onChange} />\n          <TextInput name=\"column\" label=\"Column\" value={column} onChange={this.onChange} />\n          <div className=\"generate-form__buttons\">\n            <button className=\"button\" onClick={this.onGenerate}>Generate Tiles</button>\n            <button className=\"button button--grey\" onClick={this.setAllToDefault}>Set all to default</button>\n            <button className=\"button button--saveimage\" onClick={this.displayinput}>Save image</button>\n            {!!display && <div className=\"input-alert\">\n              <label className=\"input-alert-name\">Tên image</label>\n              <input\n                type=\"text\"\n                name=\"input-alert-name\"\n                //value={nameinput}\n                onChange={this.handleChange}\n              />\n              <button onClick={this.savethiscolor}>Save the name</button>\n            </div>}\n          </div>\n        </div>\n        <div className=\"history\">History\n\n          {!!savecolors && <div className=\"history_item\">\n            {savecolors.map((item, idx) =>\n              <GenerateHistory\n                item={item}\n                key={idx}\n                idx={idx}\n                name={namecolors[idx]}\n\n              />\n              // <button key={idx} onClick={()=>this.setState({data:item})} >{`Item ${idx}`}</button>               \n\n            )}\n          </div>}\n\n\n        </div>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => ({\n  getcolors: state.getcolor.data,\n  namecolors: state.saveColor.name,\n  savecolors: state.saveColor.data\n})\nexport default connect(mapStateToProps, { generate_tiles, saveColor, saveName, generate_tiles2 })(GenerateForm);\n//chuyển tất cả các hàm trên về action\n"]},"metadata":{},"sourceType":"module"}